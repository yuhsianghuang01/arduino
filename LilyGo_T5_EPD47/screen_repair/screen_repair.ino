/**
 * @copyright Copyright (c) 2024  Shenzhen Xin Yuan Electronic Technology Co., Ltd
 *            版權所有 (c) 2024 深圳鑫源電子技術有限公司
 * @date      2024-04-05
 *            開發日期：2024年4月5日
 * @note      Arduino Setting - Arduino IDE 設定說明
 *            Tools -> 工具選單設定：
 *                  Board:"ESP32S3 Dev Module" - 開發板：ESP32S3 開發模組
 *                  USB CDC On Boot:"Enable" - 開機時啟用 USB CDC：啟用
 *                  USB DFU On Boot:"Disable" - 開機時啟用 USB DFU：停用
 *                  Flash Size : "16MB(128Mb)" - Flash 大小：16MB(128Mb)
 *                  Flash Mode"QIO 80MHz - Flash 模式：QIO 80MHz（四線輸入輸出，80MHz頻率）
 *                  Partition Scheme:"16M Flash(3M APP/9.9MB FATFS)" - 分割區方案：16M Flash（3M 應用程式/9.9MB 檔案系統）
 *                  PSRAM:"OPI PSRAM" - PSRAM：八線輸入輸出 PSRAM
 *                  Upload Mode:"UART0/Hardware CDC" - 上傳模式：UART0/硬體 CDC
 *                  USB Mode:"Hardware CDC and JTAG" - USB 模式：硬體 CDC 和 JTAG
 *
 */

#ifndef BOARD_HAS_PSRAM
#error "Please enable PSRAM, Arduino IDE -> tools -> PSRAM -> OPI !!!"
// 檢查 PSRAM 是否啟用，如未啟用則顯示錯誤訊息
// 錯誤提示：請啟用 PSRAM，路徑：Arduino IDE -> 工具 -> PSRAM -> OPI !!!
#endif

/*
 * ESP32 電子紙螢幕修復程式
 *
 * 程式功能：
 * - 修復電子紙螢幕可能出現的殘影或顯示異常問題
 * - 通過連續的像素推送操作清理螢幕殘影
 * - 使用兩階段修復程序：黑色推送和白色推送
 * - 適用於長期使用後出現顯示品質問題的電子紙螢幕
 *
 * 修復原理：
 * - 電子紙的電泳粒子可能因長期使用而產生殘影
 * - 通過交替的黑白像素推送，重新校正電泳粒子的分佈
 * - 多次重複操作確保螢幕恢復最佳顯示狀態
 *
 * 使用時機：
 * - 螢幕出現殘影或鬼影
 * - 顯示對比度下降
 * - 某些區域顯示不正常
 * - 定期維護電子紙螢幕
 */

#include <Arduino.h>    // Arduino 核心函式庫
#include "epd_driver.h" // 電子紙驅動程式標頭檔
#include "utilities.h"  // 公用函式和工具程式

/**
 * 設定函式：執行電子紙螢幕修復程序
 *
 * 修復流程：
 * 1. 初始化電子紙驅動程式
 * 2. 第一階段：黑色像素推送修復（20次）
 * 3. 第二階段：白色像素推送修復（40次）
 * 4. 清除螢幕並關閉電源
 *
 * 技術說明：
 * - 使用不同的像素值和推送次數優化修復效果
 * - 每次操作間有延遲確保電泳粒子有足夠時間響應
 * - 雙階段修復確保螢幕恢復到最佳狀態
 */
void setup()
{
    int32_t i = 0; // 迴圈計數器

    // 初始化電子紙驅動程式，設定相關的 GPIO 腳位和通訊協定
    epd_init();

    // 定義整個螢幕區域作為修復範圍
    Rect_t area = epd_full_screen();

    // 開啟電子紙電源，準備進行修復操作
    epd_poweron();

    // 短暫延遲確保電源穩定
    delay(10);

    // 清除螢幕上的所有內容，提供乾淨的起始狀態
    epd_clear();

    // ========== 第一階段：黑色像素推送修復 ==========
    for (i = 0; i < 20; i++)
    {
        // 推送黑色像素到整個螢幕（參數：區域, 推送強度50, 像素值0=黑色）
        // 這個階段主要用於清理白色殘影
        epd_push_pixels(area, 50, 0);

        // 延遲 500 毫秒讓電泳粒子有足夠時間移動
        delay(500);
    }

    // 清除螢幕，準備下一階段修復
    epd_clear();

    // ========== 第二階段：白色像素推送修復 ==========
    for (i = 0; i < 40; i++)
    {
        // 推送白色像素到整個螢幕（參數：區域, 推送強度50, 像素值1=白色）
        // 這個階段主要用於清理黑色殘影，次數更多確保徹底清理
        epd_push_pixels(area, 50, 1);

        // 延遲 500 毫秒確保每次推送操作完全生效
        delay(500);
    }

    // 最終清除螢幕，移除所有修復過程中的顯示內容
    epd_clear();

    // 關閉所有電源，包括電子紙和相關電路的電源
    // 使用 epd_poweroff_all() 而非 epd_poweroff() 以確保完全斷電
    epd_poweroff_all();
}

/**
 * 主迴圈函式：修復程序完成後保持空閒狀態
 *
 * 說明：
 * - 螢幕修復是一次性操作，在 setup() 函式中完成
 * - loop() 函式保持空白，避免重複執行修復程序
 * - 修復完成後，可以重新上傳其他程式使用修復後的螢幕
 *
 * 使用建議：
 * - 執行此程式後觀察螢幕顯示效果
 * - 如果問題仍然存在，可以重複執行此程式
 * - 修復完成後建議上傳正常的顯示程式測試效果
 */
void loop()
{
    // 空的主迴圈 - 修復程序已在 setup() 中完成
    // 程式執行完修復程序後將保持待機狀態
}
/*
screen_repair.ino 程式註解總結
1. 程式頭部和設定說明
    版權資訊：添加中英文對照的版權說明
    Arduino IDE 設定：詳細說明每個設定項目的用途
    PSRAM 檢查：說明為什麼需要啟用 PSRAM
2. 程式功能概述
    主要功能：ESP32 電子紙螢幕修復和維護
    修復目標：清除殘影、改善對比度、修復顯示異常
    應用場景：長期使用後的螢幕維護和問題修復
3. 修復原理說明
    電泳技術：解釋電子紙的工作原理
    殘影成因：說明為什麼會產生殘影問題
    修復機制：通過交替的黑白像素推送重新校正電泳粒子
4. 標頭檔案說明
    函式庫用途：每個 include 檔案的功能說明
    相依性：程式運行所需的驅動程式
5. setup() 函式詳解
    修復流程：詳細的四步驟修復程序
    雙階段修復：
    第一階段：20次黑色像素推送，清理白色殘影
    第二階段：40次白色像素推送，清理黑色殘影
    技術參數：
    推送強度：50（適中強度確保效果又不損傷螢幕）
    延遲時間：500ms（確保電泳粒子有足夠響應時間）
    推送次數：黑色20次、白色40次（經驗值優化）
6. 修復程序技術細節
    電源管理：開啟電源 → 修復操作 → 完全斷電
    區域定義：使用整個螢幕區域進行修復
    像素推送：epd_push_pixels() 函式的參數說明
    清除操作：每個階段間的螢幕清除確保乾淨狀態
7. loop() 函式說明
    空迴圈設計：修復是一次性操作的設計理念
    使用建議：修復後的操作建議和效果評估
8. 使用指導
    適用時機：何時需要執行螢幕修復
    效果評估：如何判斷修復是否成功
    重複使用：必要時可重複執行修復程序
9. 技術特點
    非破壞性修復：溫和的修復方式不會損害螢幕
    自動化程序：一鍵執行完整修復流程
    經驗優化：基於實際使用經驗調整的參數設定
    這個程式現在包含了完整的中文技術文件，涵蓋了電子紙螢幕維護的核心知識：

    硬體原理：電泳顯示技術和殘影形成機制
    修復技術：像素推送和電泳粒子重新校正
    實用指導：何時使用、如何評估修復效果
    安全考量：溫和修復避免螢幕損傷
*/